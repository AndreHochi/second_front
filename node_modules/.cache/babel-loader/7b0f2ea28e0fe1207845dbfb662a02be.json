{"ast":null,"code":"export const fetchObjectives = (dispatch, store) => {\n  let reqPackage = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n    }\n  };\n  fetch(\"http://localhost:3000/api/v1/getobjectives\", reqPackage).then(res => res.json()).then(data => {\n    dispatch({\n      type: \"GET_OBJECTIVES\",\n      objectives: data.objectives\n    });\n  }).then(() => generateTimers(dispatch, store.getState));\n};\nexport const fetchLinks = dispatch => {\n  let reqPackage = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n    }\n  };\n  fetch(\"http://localhost:3000/api/v1/getlinks\", reqPackage).then(res => res.json()).then(data => {\n    dispatch({\n      type: \"GET_LINKS\",\n      links: data.links\n    });\n  });\n};\nexport const createObjAction = (e, dispatch, history, store) => {\n  e.preventDefault();\n  const state = store.getState(); //for None first\n\n  if (e.target[0].value === \"\") {\n    let newObj = {\n      name: e.target[1].value,\n      description: e.target[2].value,\n      duration: e.target[3].value,\n      years: e.target[4].value,\n      months: e.target[5].value,\n      days: e.target[6].value,\n      hours: e.target[7].value,\n      minutes: e.target[8].value,\n      seconds: e.target[9].value\n    };\n    let reqPackage = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify(newObj)\n    };\n    fetch(\"http://localhost:3000/api/v1/newObjNoLink\", reqPackage).then(data => {\n      dispatch({\n        type: \"NEWOBJS\",\n        objective: data.objective\n      });\n    }).then(console.log(state.objectiveState));\n  }\n\n  ;\n}; // black magic below\n\nexport const generateTimers = (dispatch, getState) => {\n  const state = getState();\n  const objectives = state.objectiveState.objectives;\n  const timers = [];\n  objectives.forEach(objective => {\n    const years = objective.years;\n    const months = objective.months;\n    const days = objective.days;\n    const hours = objective.hours;\n    const minutes = objective.minutes;\n    const seconds = objective.seconds;\n    years.replace(\" \", \"\").split(\",\").forEach(year => {\n      months.replace(\" \", \"\").split(\",\").forEach(month => {\n        days.replace(\" \", \"\").split(\",\").forEach(day => {\n          hours.replace(\" \", \"\").split(\",\").forEach(hour => {\n            minutes.replace(\" \", \"\").split(\",\").forEach(minute => {\n              seconds.replace(\" \", \"\").split(\",\").forEach(second => {\n                timers.push({\n                  name: objective.name,\n                  description: objective.description,\n                  duration: objective.duration,\n                  objective_id: objective.id,\n                  start: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second)),\n                  end: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second + objective.duration))\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n  console.log(timers);\n  dispatch({\n    type: \"GET_TIMERS\",\n    timers: timers\n  });\n}; // black magic above","map":{"version":3,"sources":["/home/learn/flatiron/week10/second/second_frontend/src/actions/objectiveAction.js"],"names":["fetchObjectives","dispatch","store","reqPackage","method","headers","localStorage","getItem","fetch","then","res","json","data","type","objectives","generateTimers","getState","fetchLinks","links","createObjAction","e","history","preventDefault","state","target","value","newObj","name","description","duration","years","months","days","hours","minutes","seconds","body","JSON","stringify","objective","console","log","objectiveState","timers","forEach","replace","split","year","month","day","hour","minute","second","push","objective_id","id","start","Date","parseInt","end"],"mappings":"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","sourcesContent":["export const fetchObjectives = (dispatch, store) => {\n\n    let reqPackage = {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n        },\n    };\n\n    fetch(\"http://localhost:3000/api/v1/getobjectives\", reqPackage)\n        .then((res) => res.json())\n        .then((data) => { dispatch({ type: \"GET_OBJECTIVES\", objectives: data.objectives }) })\n        .then(() => generateTimers(dispatch, store.getState))\n}\n\nexport const fetchLinks = (dispatch) => {\n\n    let reqPackage = {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n        },\n    };\n\n    fetch(\"http://localhost:3000/api/v1/getlinks\", reqPackage)\n        .then((res) => res.json())\n\n        .then((data) => { dispatch({ type: \"GET_LINKS\", links: data.links}) })\n\n}\n\nexport const createObjAction = (e, dispatch, history, store) => {\n    e.preventDefault()\n    const state = store.getState()\n\n\n    //for None first\n    if (e.target[0].value === \"\") {\n\n        let newObj = {\n            name: e.target[1].value,\n            description: e.target[2].value,\n            duration: e.target[3].value,\n            years: e.target[4].value,\n            months: e.target[5].value,\n            days: e.target[6].value,\n            hours: e.target[7].value,\n            minutes: e.target[8].value,\n            seconds: e.target[9].value\n        }\n\n\n        let reqPackage = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n            },\n            body: JSON.stringify(newObj)\n        }\n\n\n        fetch(\"http://localhost:3000/api/v1/newObjNoLink\", reqPackage)\n        .then((data) => { dispatch({ type: \"NEWOBJS\", objective: data.objective }) })\n        .then(console.log(state.objectiveState))\n\n    };\n\n\n}\n\n\n// black magic below\nexport const generateTimers = (dispatch, getState) => {\n    const state = getState()\n    const objectives = state.objectiveState.objectives\n    const timers = []\n\n    objectives.forEach(objective => {\n        const years = objective.years\n        const months = objective.months\n        const days = objective.days\n        const hours = objective.hours\n        const minutes = objective.minutes\n        const seconds = objective.seconds\n        years.replace(\" \", \"\").split(\",\").forEach(year => {\n            months.replace(\" \", \"\").split(\",\").forEach(month => {\n                days.replace(\" \", \"\").split(\",\").forEach(day => {\n                    hours.replace(\" \", \"\").split(\",\").forEach(hour => {\n                        minutes.replace(\" \", \"\").split(\",\").forEach(minute => {\n                            seconds.replace(\" \", \"\").split(\",\").forEach(second => {\n                                timers.push({ name: objective.name, description: objective.description, duration: objective.duration, objective_id: objective.id, start: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second)), end: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second + objective.duration)) })\n                            })\n                        })\n                    })\n                })\n            })\n        })\n    })\n\n    console.log(timers)\n\n    dispatch({ type: \"GET_TIMERS\", timers: timers })\n}\n// black magic above"]},"metadata":{},"sourceType":"module"}