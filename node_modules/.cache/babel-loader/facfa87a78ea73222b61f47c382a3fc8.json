{"ast":null,"code":"export const fetchObjectives = (dispatch, store) => {\n  let reqPackage = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n    }\n  };\n  fetch(\"http://localhost:3000/api/v1/getobjectives\", reqPackage).then(res => res.json()).then(data => {\n    dispatch({\n      type: \"GET_OBJECTIVES\",\n      objectives: data.objectives\n    });\n  }).then(() => generateTimers(dispatch, store.getState));\n};\nexport const deleteObjAction = (e, dispatch, history, store) => {\n  e.preventDefault();\n  const state = store.getState();\n  let send = {\n    id: state.objectiveState.currentObj\n  };\n  let newLinks = state.objectiveState.links.filter(link => link.before_id === state.objectiveState.currentObj || link.after_id === state.objectiveState.currentObj);\n  let reqPackage = {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n    },\n    body: JSON.stringify(send)\n  };\n  fetch(\"http://localhost:3000/api/v1/deleteObj\", reqPackage).then(() => dispatch({\n    type: \"DELETEOBJ\",\n    objective: state.objectiveState.objectives.find(objective => objective.id == state.objectiveState.currentObj)\n  })).then(() => {\n    const objectives = state.objectiveState.objectives;\n    const timers = [];\n    objectives.forEach(objective => {\n      const years = objective.years;\n      const months = objective.months;\n      const days = objective.days;\n      const hours = objective.hours;\n      const minutes = objective.minutes;\n      const seconds = objective.seconds;\n      years.replace(\" \", \"\").split(\",\").forEach(year => {\n        months.replace(\" \", \"\").split(\",\").forEach(month => {\n          days.replace(\" \", \"\").split(\",\").forEach(day => {\n            hours.replace(\" \", \"\").split(\",\").forEach(hour => {\n              minutes.replace(\" \", \"\").split(\",\").forEach(minute => {\n                seconds.replace(\" \", \"\").split(\",\").forEach(second => {\n                  timers.push({\n                    name: objective.name,\n                    description: objective.description,\n                    duration: objective.duration,\n                    objective_id: objective.id,\n                    start: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second)),\n                    end: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second + objective.duration))\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n    dispatch({\n      type: \"GET_TIMERS\",\n      timers: timers\n    });\n  }).then(() => {\n    history.push(\"/main\");\n    dispatch({\n      type: \"NEWCURRENTLINKS\",\n      link: newLinks\n    });\n    dispatch({\n      type: \"RESETCURROBJ\"\n    });\n  });\n};\nexport const fetchLinks = dispatch => {\n  let reqPackage = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n    }\n  };\n  fetch(\"http://localhost:3000/api/v1/getlinks\", reqPackage).then(res => res.json()).then(data => {\n    dispatch({\n      type: \"GET_LINKS\",\n      links: data.links\n    });\n    const befores = data.links.map(link => link.before_id);\n    const afters = data.links.map(link => link.after_id);\n    const send = afters.find(after => befores.includes(after));\n  });\n};\nexport const createObjAction = (e, dispatch, history, store) => {\n  e.preventDefault();\n  const state = store.getState(); //for None first\n\n  if (e.target[0].value === \"\") {\n    let newObj = {\n      name: e.target[1].value,\n      description: e.target[2].value,\n      duration: e.target[3].value,\n      years: e.target[4].value,\n      months: e.target[5].value,\n      days: e.target[6].value,\n      hours: e.target[7].value,\n      minutes: e.target[8].value,\n      seconds: e.target[9].value\n    };\n    let reqPackage = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify(newObj)\n    };\n    fetch(\"http://localhost:3000/api/v1/newObjNoLink\", reqPackage).then(res => res.json()).then(data => {\n      dispatch({\n        type: \"NEWOBJS\",\n        objective: data.objective\n      });\n    }).then(() => history.push(\"/main\"));\n  } else {\n    let linkedObjective = state.objectiveState.objectives.find(objective => objective.id == e.target[0].value);\n    let newSeconds = linkedObjective.seconds.replace(\" \", \"\").split(\",\").map(second => String(parseInt(second) + parseInt(linkedObjective.duration) + parseInt(e.target[4].value))).reduce((accumulator, currentValue) => accumulator + \",\" + currentValue);\n    let newObj = {\n      linkedObjectiveid: e.target[0].value,\n      name: e.target[1].value,\n      description: e.target[2].value,\n      duration: e.target[3].value,\n      delay: e.target[4].value,\n      years: linkedObjective.years,\n      months: linkedObjective.months,\n      days: linkedObjective.days,\n      hours: linkedObjective.hours,\n      minutes: linkedObjective.minutes,\n      seconds: newSeconds\n    };\n    let reqPackage = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify(newObj)\n    };\n    fetch(\"http://localhost:3000/api/v1/newObjLink\", reqPackage).then(res => res.json()).then(data => {\n      dispatch({\n        type: \"NEWOBJS\",\n        objective: data.objective\n      });\n      dispatch({\n        type: \"NEWLINKS\",\n        link: data.link\n      });\n    }) //stolen from the black magic below\n    .then(() => {\n      const objectives = state.objectiveState.objectives;\n      const timers = [];\n      objectives.forEach(objective => {\n        const years = objective.years;\n        const months = objective.months;\n        const days = objective.days;\n        const hours = objective.hours;\n        const minutes = objective.minutes;\n        const seconds = objective.seconds;\n        years.replace(\" \", \"\").split(\",\").forEach(year => {\n          months.replace(\" \", \"\").split(\",\").forEach(month => {\n            days.replace(\" \", \"\").split(\",\").forEach(day => {\n              hours.replace(\" \", \"\").split(\",\").forEach(hour => {\n                minutes.replace(\" \", \"\").split(\",\").forEach(minute => {\n                  seconds.replace(\" \", \"\").split(\",\").forEach(second => {\n                    {\n                      debugger;\n                    }\n                    timers.push({\n                      name: objective.name,\n                      description: objective.description,\n                      duration: objective.duration,\n                      objective_id: objective.id,\n                      start: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second)),\n                      end: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second + objective.duration))\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n      dispatch({\n        type: \"GET_TIMERS\",\n        timers: timers\n      });\n    }).then(() => history.push(\"/main\"));\n  }\n\n  ;\n};\nexport const editObjAction = (e, dispatch, history, store) => {\n  e.preventDefault();\n  const state = store.getState();\n  const objectives = state.objectiveState.objectives;\n  const links = state.objectiveState.links;\n  const befores = links.map(link => String(link.before_id));\n  const afters = links.map(link => String(link.after_id));\n  const user_id = objectives[0].user_id;\n  const newStartingObj = {\n    id: parseInt(e.target[0].value),\n    user_id: user_id,\n    name: e.target[1].value,\n    description: e.target[2].value,\n    duration: e.target[3].value,\n    years: e.target[4].value,\n    months: e.target[5].value,\n    days: e.target[6].value,\n    hours: e.target[7].value,\n    minutes: e.target[8].value,\n    seconds: e.target[9].value\n  };\n  let sendObjs = [newStartingObj];\n  let initObj = newStartingObj;\n\n  while (befores.includes(String(initObj.id))) {\n    let link = links.filter(link => String(link.before_id) === String(initObj.id))[0];\n    let afterObj = objectives.filter(objective => String(objective.id) === String(link.after_id))[0];\n    let newSeconds = initObj.seconds.replace(\" \", \"\").split(\",\").map(second => String(parseInt(second) + parseInt(initObj.duration) + parseInt(link.delay))).reduce((accumulator, currentValue) => accumulator + \",\" + currentValue);\n    initObj = {\n      id: afterObj.id,\n      name: afterObj.name,\n      user_id: user_id,\n      description: afterObj.description,\n      duration: afterObj.duration,\n      years: e.target[4].value,\n      months: e.target[5].value,\n      days: e.target[6].value,\n      hours: e.target[7].value,\n      minutes: e.target[8].value,\n      seconds: newSeconds\n    };\n    sendObjs = sendObjs.concat(initObj);\n  }\n\n  console.log(sendObjs);\n  let reqPackage = {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n    },\n    body: JSON.stringify({\n      data: sendObjs\n    })\n  };\n  const changingIds = sendObjs.map(objective => objective.id);\n  const filtered_objectives = objectives.filter(objective => !changingIds.includes(objective.id));\n  const newState = filtered_objectives.concat(sendObjs);\n  dispatch({\n    type: \"EDITOBJS\",\n    objectives: newState\n  });\n  fetch(\"http://localhost:3000/api/v1/editObj\", reqPackage);\n  const timers = [];\n  objectives.forEach(objective => {\n    const years = objective.years;\n    const months = objective.months;\n    const days = objective.days;\n    const hours = objective.hours;\n    const minutes = objective.minutes;\n    const seconds = objective.seconds;\n    years.replace(\" \", \"\").split(\",\").forEach(year => {\n      months.replace(\" \", \"\").split(\",\").forEach(month => {\n        days.replace(\" \", \"\").split(\",\").forEach(day => {\n          hours.replace(\" \", \"\").split(\",\").forEach(hour => {\n            minutes.replace(\" \", \"\").split(\",\").forEach(minute => {\n              seconds.replace(\" \", \"\").split(\",\").forEach(second => {\n                timers.push({\n                  name: objective.name,\n                  description: objective.description,\n                  duration: objective.duration,\n                  objective_id: objective.id,\n                  start: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second)),\n                  end: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second + objective.duration))\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n  dispatch({\n    type: \"GET_TIMERS\",\n    timers: timers\n  });\n  history.push(\"/main\");\n}; // black magic below\n\nexport const generateTimers = (dispatch, getState) => {\n  const state = getState();\n  const objectives = state.objectiveState.objectives;\n  const timers = [];\n  objectives.forEach(objective => {\n    const years = objective.years;\n    const months = objective.months;\n    const days = objective.days;\n    const hours = objective.hours;\n    const minutes = objective.minutes;\n    const seconds = objective.seconds;\n    years.replace(\" \", \"\").split(\",\").forEach(year => {\n      months.replace(\" \", \"\").split(\",\").forEach(month => {\n        days.replace(\" \", \"\").split(\",\").forEach(day => {\n          hours.replace(\" \", \"\").split(\",\").forEach(hour => {\n            minutes.replace(\" \", \"\").split(\",\").forEach(minute => {\n              seconds.replace(\" \", \"\").split(\",\").forEach(second => {\n                console.log(second + objective.duration);\n                timers.push({\n                  name: objective.name,\n                  description: objective.description,\n                  duration: objective.duration,\n                  objective_id: objective.id,\n                  start: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second)),\n                  end: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second + objective.duration))\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n  console.log(timers);\n  dispatch({\n    type: \"GET_TIMERS\",\n    timers: timers\n  });\n}; // black magic above","map":{"version":3,"sources":["/home/learn/flatiron/week10/second/second_frontend/src/actions/objectiveAction.js"],"names":["fetchObjectives","dispatch","store","reqPackage","method","headers","localStorage","getItem","fetch","then","res","json","data","type","objectives","generateTimers","getState","deleteObjAction","e","history","preventDefault","state","send","id","objectiveState","currentObj","newLinks","links","filter","link","before_id","after_id","body","JSON","stringify","objective","find","timers","forEach","years","months","days","hours","minutes","seconds","replace","split","year","month","day","hour","minute","second","push","name","description","duration","objective_id","start","Date","parseInt","end","fetchLinks","befores","map","afters","after","includes","createObjAction","target","value","newObj","linkedObjective","newSeconds","String","reduce","accumulator","currentValue","linkedObjectiveid","delay","editObjAction","user_id","newStartingObj","sendObjs","initObj","afterObj","concat","console","log","changingIds","filtered_objectives","newState"],"mappings":"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","sourcesContent":["export const fetchObjectives = (dispatch, store) => {\n\n    let reqPackage = {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n        },\n    };\n\n    fetch(\"http://localhost:3000/api/v1/getobjectives\", reqPackage)\n        .then((res) => res.json())\n        .then((data) => { dispatch({ type: \"GET_OBJECTIVES\", objectives: data.objectives }) })\n        .then(() => generateTimers(dispatch, store.getState))\n}\n\nexport const deleteObjAction = (e, dispatch, history, store) => {\n\n    e.preventDefault()\n    const state = store.getState()\n\n    let send = {\n        id: state.objectiveState.currentObj\n    }\n\n    let newLinks = state.objectiveState.links.filter(link => link.before_id === state.objectiveState.currentObj || link.after_id === state.objectiveState.currentObj)\n\n    let reqPackage = {\n        method: \"DELETE\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify(send)\n    }\n\n    fetch(\"http://localhost:3000/api/v1/deleteObj\", reqPackage)\n        .then(() => dispatch({ type: \"DELETEOBJ\", objective: state.objectiveState.objectives.find(objective => objective.id == state.objectiveState.currentObj) }))\n        .then(() => {\n            const objectives = state.objectiveState.objectives\n            const timers = []\n            objectives.forEach(objective => {\n                const years = objective.years\n                const months = objective.months\n                const days = objective.days\n                const hours = objective.hours\n                const minutes = objective.minutes\n                const seconds = objective.seconds\n                years.replace(\" \", \"\").split(\",\").forEach(year => {\n                    months.replace(\" \", \"\").split(\",\").forEach(month => {\n                        days.replace(\" \", \"\").split(\",\").forEach(day => {\n                            hours.replace(\" \", \"\").split(\",\").forEach(hour => {\n                                minutes.replace(\" \", \"\").split(\",\").forEach(minute => {\n                                    seconds.replace(\" \", \"\").split(\",\").forEach(second => {\n                                        timers.push({ name: objective.name, description: objective.description, duration: objective.duration, objective_id: objective.id, start: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second)), end: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second + objective.duration)) })\n                                    })\n                                })\n                            })\n                        })\n                    })\n                })\n            })\n\n            dispatch({ type: \"GET_TIMERS\", timers: timers })\n\n        })\n        \n        .then(() => {history.push(\"/main\")\n        dispatch({ type: \"NEWCURRENTLINKS\", link:newLinks})\n        dispatch({ type: \"RESETCURROBJ\" })})\n\n}\n\nexport const fetchLinks = (dispatch) => {\n\n    let reqPackage = {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n        },\n    };\n\n    fetch(\"http://localhost:3000/api/v1/getlinks\", reqPackage)\n        .then((res) => res.json())\n        .then((data) => {\n            dispatch({ type: \"GET_LINKS\", links: data.links })\n            const befores = data.links.map(link => link.before_id)\n            const afters = data.links.map(link => link.after_id)\n            const send = afters.find(after => befores.includes(after))\n\n        })\n}\n\nexport const createObjAction = (e, dispatch, history, store) => {\n    e.preventDefault()\n    const state = store.getState()\n\n    //for None first\n    if (e.target[0].value === \"\") {\n\n        let newObj = {\n            name: e.target[1].value,\n            description: e.target[2].value,\n            duration: e.target[3].value,\n            years: e.target[4].value,\n            months: e.target[5].value,\n            days: e.target[6].value,\n            hours: e.target[7].value,\n            minutes: e.target[8].value,\n            seconds: e.target[9].value\n        }\n\n        let reqPackage = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n            },\n            body: JSON.stringify(newObj)\n        }\n\n        fetch(\"http://localhost:3000/api/v1/newObjNoLink\", reqPackage)\n            .then((res) => res.json())\n            .then((data) => { dispatch({ type: \"NEWOBJS\", objective: data.objective }) })\n            .then(() => history.push(\"/main\"))\n\n    } else {\n\n        let linkedObjective = state.objectiveState.objectives.find(objective => objective.id == e.target[0].value)\n\n        let newSeconds = linkedObjective.seconds.replace(\" \", \"\").split(\",\").map(second => String(parseInt(second) + parseInt(linkedObjective.duration) + parseInt(e.target[4].value))).reduce((accumulator, currentValue) => accumulator + \",\" + currentValue)\n\n        let newObj = {\n            linkedObjectiveid: e.target[0].value,\n            name: e.target[1].value,\n            description: e.target[2].value,\n            duration: e.target[3].value,\n            delay: e.target[4].value,\n            years: linkedObjective.years,\n            months: linkedObjective.months,\n            days: linkedObjective.days,\n            hours: linkedObjective.hours,\n            minutes: linkedObjective.minutes,\n            seconds: newSeconds\n        }\n\n        let reqPackage = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n            },\n            body: JSON.stringify(newObj)\n        }\n\n        fetch(\"http://localhost:3000/api/v1/newObjLink\", reqPackage)\n            .then((res) => res.json())\n            .then((data) => { dispatch({ type: \"NEWOBJS\", objective: data.objective }); dispatch({ type: \"NEWLINKS\", link: data.link }) })\n            //stolen from the black magic below\n            .then(() => {\n                const objectives = state.objectiveState.objectives\n                const timers = []\n\n                objectives.forEach(objective => {\n                    const years = objective.years\n                    const months = objective.months\n                    const days = objective.days\n                    const hours = objective.hours\n                    const minutes = objective.minutes\n                    const seconds = objective.seconds\n                    years.replace(\" \", \"\").split(\",\").forEach(year => {\n                        months.replace(\" \", \"\").split(\",\").forEach(month => {\n                            days.replace(\" \", \"\").split(\",\").forEach(day => {\n                                hours.replace(\" \", \"\").split(\",\").forEach(hour => {\n                                    minutes.replace(\" \", \"\").split(\",\").forEach(minute => {\n                                        seconds.replace(\" \", \"\").split(\",\").forEach(second => {\n                                            {debugger}\n                                            timers.push({ name: objective.name, description: objective.description, duration: objective.duration, objective_id: objective.id, start: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second)), end: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second + objective.duration)) })\n                                        })\n                                    })\n                                })\n                            })\n                        })\n                    })\n                })\n\n                dispatch({ type: \"GET_TIMERS\", timers: timers })\n            })\n            .then(() => history.push(\"/main\"))\n    };\n}\n\nexport const editObjAction = (e, dispatch, history, store) => {\n    e.preventDefault()\n    const state = store.getState()\n    const objectives = state.objectiveState.objectives\n    const links = state.objectiveState.links\n    const befores = links.map(link => String(link.before_id))\n    const afters = links.map(link => String(link.after_id))\n    const user_id = objectives[0].user_id\n\n    const newStartingObj = {\n        id: parseInt(e.target[0].value),\n        user_id: user_id,\n        name: e.target[1].value,\n        description: e.target[2].value,\n        duration: e.target[3].value,\n        years: e.target[4].value,\n        months: e.target[5].value,\n        days: e.target[6].value,\n        hours: e.target[7].value,\n        minutes: e.target[8].value,\n        seconds: e.target[9].value,\n    }\n\n    let sendObjs = [newStartingObj]\n    let initObj = newStartingObj\n\n\n\n    while (befores.includes(String(initObj.id))) {\n        let link = links.filter(link => String(link.before_id) === String(initObj.id))[0]\n        let afterObj = objectives.filter(objective => String(objective.id) === String(link.after_id))[0]\n        let newSeconds = initObj.seconds.replace(\" \", \"\").split(\",\").map(second => String(parseInt(second) + parseInt(initObj.duration) + parseInt(link.delay))).reduce((accumulator, currentValue) => accumulator + \",\" + currentValue)\n\n        initObj = {\n            id: afterObj.id,\n            name: afterObj.name,\n            user_id: user_id,\n\n            description: afterObj.description,\n            duration: afterObj.duration,\n            years: e.target[4].value,\n            months: e.target[5].value,\n            days: e.target[6].value,\n            hours: e.target[7].value,\n            minutes: e.target[8].value,\n            seconds: newSeconds\n        }\n\n        sendObjs = sendObjs.concat(initObj)\n    }\n\n    console.log(sendObjs)\n\n    let reqPackage = {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({data: sendObjs})\n    }\n\n    const changingIds = sendObjs.map(objective => objective.id)\n\n    const filtered_objectives = objectives.filter(objective => !changingIds.includes(objective.id) )\n\n    const newState = filtered_objectives.concat(sendObjs)\n\n    dispatch({type: \"EDITOBJS\", objectives: newState})\n\n    fetch(\"http://localhost:3000/api/v1/editObj\", reqPackage)\n\n    const timers = []\n\n    objectives.forEach(objective => {\n        const years = objective.years\n        const months = objective.months\n        const days = objective.days\n        const hours = objective.hours\n        const minutes = objective.minutes\n        const seconds = objective.seconds\n        years.replace(\" \", \"\").split(\",\").forEach(year => {\n            months.replace(\" \", \"\").split(\",\").forEach(month => {\n                days.replace(\" \", \"\").split(\",\").forEach(day => {\n                    hours.replace(\" \", \"\").split(\",\").forEach(hour => {\n                        minutes.replace(\" \", \"\").split(\",\").forEach(minute => {\n                            seconds.replace(\" \", \"\").split(\",\").forEach(second => {\n                                timers.push({ name: objective.name, description: objective.description, duration: objective.duration, objective_id: objective.id, start: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second)), end: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second + objective.duration)) })\n                            })\n                        })\n                    })\n                })\n            })\n        })\n    })\n\n    dispatch({ type: \"GET_TIMERS\", timers: timers })\n    history.push(\"/main\")\n\n}\n\n// black magic below\nexport const generateTimers = (dispatch, getState) => {\n    const state = getState()\n    const objectives = state.objectiveState.objectives\n    const timers = []\n\n    objectives.forEach(objective => {\n        const years = objective.years\n        const months = objective.months\n        const days = objective.days\n        const hours = objective.hours\n        const minutes = objective.minutes\n        const seconds = objective.seconds\n        years.replace(\" \", \"\").split(\",\").forEach(year => {\n            months.replace(\" \", \"\").split(\",\").forEach(month => {\n                days.replace(\" \", \"\").split(\",\").forEach(day => {\n                    hours.replace(\" \", \"\").split(\",\").forEach(hour => {\n                        minutes.replace(\" \", \"\").split(\",\").forEach(minute => {\n                            seconds.replace(\" \", \"\").split(\",\").forEach(second => {\n                                console.log(second + objective.duration)\n                                timers.push({ name: objective.name, description: objective.description, duration: objective.duration, objective_id: objective.id, start: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second)), end: new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute), parseInt(second + objective.duration)) })\n                            })\n                        })\n                    })\n                })\n            })\n        })\n    })\n\n    console.log(timers)\n\n    dispatch({ type: \"GET_TIMERS\", timers: timers })\n}\n// black magic above\n\n\n"]},"metadata":{},"sourceType":"module"}