{"ast":null,"code":"var _jsxFileName = \"/home/learn/flatiron/week10/second/second_frontend/src/components/Card.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Card = props => {\n  _s();\n\n  const states = useSelector(reducer => reducer.clockState);\n  const dispatch = useDispatch();\n  let dayToMili = 86400000;\n  let hourToMili = 3600000;\n  let minuteToMili = 60000;\n  let secondToMili = 1000; // console.log(props.timer)\n  // let remainingtime_s = new Date(props.timer.years, props.timer.months, props.timer.days, props.timer.hours, props.timer.minutes, props.timer.seconds + props.timer.duration) - states.time\n  // // let days = Math.floor(remainingtime_s / dayToMili)\n  // let remainingtime = remainingtime_s % dayToMili\n  // let hours = Math.floor(remainingtime / hourToMili)\n  // remainingtime = remainingtime % hourToMili\n  // let minutes = Math.floor(remainingtime / minuteToMili)\n  // remainingtime = remainingtime % minuteToMili\n  // let seconds = Math.floor(remainingtime / secondToMili)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [`${props.timer.end.getHours()}`.padStart(2, '0'), \" : \", `${props.timer.end.getMinutes()}`.padStart(2, '0'), \" : \", `${props.timer.end.getSeconds()}`.padStart(2, '0')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.timer.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.timer.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Card, \"WPLUCK/AAIKrYFc8LezYapLToAY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/home/learn/flatiron/week10/second/second_frontend/src/components/Card.js"],"names":["React","useSelector","useDispatch","Card","props","states","reducer","clockState","dispatch","dayToMili","hourToMili","minuteToMili","secondToMili","timer","end","getHours","padStart","getMinutes","getSeconds","name","description"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAGA,OAAO,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AAE3B,QAAMC,MAAM,GAAGJ,WAAW,CAACK,OAAO,IAAIA,OAAO,CAACC,UAApB,CAA1B;AACA,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AAEA,MAAIO,SAAS,GAAG,QAAhB;AACA,MAAIC,UAAU,GAAG,OAAjB;AACA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,YAAY,GAAG,IAAnB,CAR2B,CAU3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BAEK;AAAA,iBAAK,GAAER,KAAK,CAACS,KAAN,CAAYC,GAAZ,CAAgBC,QAAhB,EAA2B,EAA9B,CAAgCC,QAAhC,CAAyC,CAAzC,EAA4C,GAA5C,CAAJ,SAA0D,GAAEZ,KAAK,CAACS,KAAN,CAAYC,GAAZ,CAAgBG,UAAhB,EAA6B,EAAhC,CAAkCD,QAAlC,CAA2C,CAA3C,EAA8C,GAA9C,CAAzD,SAAiH,GAAEZ,KAAK,CAACS,KAAN,CAAYC,GAAZ,CAAgBI,UAAhB,EAA6B,EAAhC,CAAkCF,QAAlC,CAA2C,CAA3C,EAA8C,GAA9C,CAAhH;AAAA;AAAA;AAAA;AAAA;AAAA,YAFL,eAGK;AAAA,gBAAIZ,KAAK,CAACS,KAAN,CAAYM;AAAhB;AAAA;AAAA;AAAA;AAAA,YAHL,eAIK;AAAA,gBAAIf,KAAK,CAACS,KAAN,CAAYO;AAAhB;AAAA;AAAA;AAAA;AAAA,YAJL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAlCM;;GAAMjB,I;UAEMF,W,EACEC,W;;;KAHRC,I","sourcesContent":["import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\n\nexport const Card = (props) => {\n\n    const states = useSelector(reducer => reducer.clockState)\n    const dispatch = useDispatch()\n\n    let dayToMili = 86400000\n    let hourToMili = 3600000\n    let minuteToMili = 60000\n    let secondToMili = 1000\n\n    // console.log(props.timer)\n\n    // let remainingtime_s = new Date(props.timer.years, props.timer.months, props.timer.days, props.timer.hours, props.timer.minutes, props.timer.seconds + props.timer.duration) - states.time\n    // // let days = Math.floor(remainingtime_s / dayToMili)\n    // let remainingtime = remainingtime_s % dayToMili\n    // let hours = Math.floor(remainingtime / hourToMili)\n    // remainingtime = remainingtime % hourToMili\n    // let minutes = Math.floor(remainingtime / minuteToMili)\n    // remainingtime = remainingtime % minuteToMili\n    // let seconds = Math.floor(remainingtime / secondToMili)\n\n\n\n    return (\n        <div className='card'>\n            {/* {86400000 > remainingtime_s > 0 ? <p>{`${hours}`.padStart(2, '0')} : {`${minutes}`.padStart(2, '0')} : {`${seconds}`.padStart(2, '0')}</p> : <h1></h1>} */}\n            {<p>{`${props.timer.end.getHours()}`.padStart(2, '0')} : {`${props.timer.end.getMinutes()}`.padStart(2, '0')} : {`${props.timer.end.getSeconds()}`.padStart(2, '0')}</p>}\n            {<p>{props.timer.name}</p>}\n            {<p>{props.timer.description}</p>}\n            {/* <p>{`${days}`} : {`${hours}`.padStart(2, '0')} : {`${minutes}`.padStart(2, '0')} : {`${seconds}`.padStart(2, '0')}</p>\n            <p>{props.objective.name}</p>\n            <p>{props.objective.description}</p> */}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}